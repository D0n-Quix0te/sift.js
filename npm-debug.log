0 info it worked if it ends with ok
1 verbose cli [ 'node', '/usr/local/bin/npm', 'publish' ]
2 info using npm@2.5.0
3 info using node@v0.10.36
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/craig/Developer/Public/sift.js',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/craig/.npm/sift/1.1.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/craig/.npm/sift/1.1.0/package.tgz',
9 verbose tar pack   '/Users/craig/Developer/Public/sift.js' ]
10 verbose tarball /Users/craig/.npm/sift/1.1.0/package.tgz
11 verbose folder /Users/craig/Developer/Public/sift.js
12 info prepublish sift@1.1.0
13 verbose addLocalTarball adding from inside cache /Users/craig/.npm/sift/1.1.0/package.tgz
14 silly cache afterAdd sift@1.1.0
15 verbose afterAdd /Users/craig/.npm/sift/1.1.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/craig/.npm/sift/1.1.0/package/package.json written
17 silly publish { name: 'sift',
17 silly publish   description: 'mongodb query style array filtering',
17 silly publish   version: '1.1.0',
17 silly publish   repository: {},
17 silly publish   engines: {},
17 silly publish   dependencies: {},
17 silly publish   devDependencies:
17 silly publish    { bson: '^0.2.18',
17 silly publish      coveralls: '^2.11.2',
17 silly publish      istanbul: '^0.3.5',
17 silly publish      jscs: '^1.11.0',
17 silly publish      jshint: '^2.6.0',
17 silly publish      mocha: '^2.1.0',
17 silly publish      'uglify-js': '^2.4.16' },
17 silly publish   main: './sift.js',
17 silly publish   scripts: { test: 'make lint test-coveralls' },
17 silly publish   readme: '## MongoDB inspired array filtering \n[![Build Status](https://secure.travis-ci.org/crcn/sift.js.png)](https://secure.travis-ci.org/crcn/sift.js) [![Coverage Status](https://coveralls.io/repos/crcn/sift.js/badge.svg)](https://coveralls.io/r/crcn/sift.js) [![Join the chat at https://gitter.im/crcn/sift.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/crcn/sift.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n**For extended documentation, checkout http://docs.mongodb.org/manual/reference/operator/query/**\n\n## Features:\n\n- Supported operators: [$in](#in), [$nin](#nin), [$exists](#exists), [$gte](#gte), [$gt](#gt), [$lte](#lte), [$lt](#lt), [$eq](#eq), [$ne](#ne), [$mod](#mod), [$all](#all), [$and](#and), [$or](#or), [$nor](#nor), [$not](#not), [$size](#size), [$type](#type), [$regex](#regex), [$where](#where)\n- Regexp searches\n- Function filtering\n- sub object searching\n- dot notation searching\n- Supports node.js, and web\n- Small (2 kb minified) library\n- Custom Expressions \n\n\n\n## Node.js Examples\n\n```javascript\n\nvar sift = require(\'sift\');\n\n//intersecting arrays\nvar sifted = sift({ $in: [\'hello\',\'world\'] }, [\'hello\',\'sifted\',\'array!\']); //[\'hello\']\n\n//regexp filter\nvar sifted = sift(/^j/, [\'craig\',\'john\',\'jake\']); //[\'john\',\'jake\']\n\n\n//A *sifter* is returned if the second parameter is omitted\nvar siftPeople = sift({\n\n\t//you can also filter against functions\n\tname: function(value) {\n\t\treturn value.length == 5;\n\t}\n});\n\n//filtered: [{ name: \'craig\' }]\nsiftPeople([{\n\tname: \'craig\',\n},\n{\n\tname: \'john\'\n},\n{\n\tname: \'jake\'\n}]);\n\n\n//you can test *single values* against your custom sifter\nsiftPeople.test({ name: \'sarah\' }); //true\nsiftPeople.test({ name: \'tim\' }); //false\\\n```\n\n## Browser Examples\n```html\n<html>\n\t<head>\n\t\t<script src="https://raw.github.com/crcn/sift.js/master/sift.min.js" type="text/javascript"></script>\n\t\t<script type="text/javascript">\n\t\t\t//regexp filter\n\t\t\tvar sifted = sift(/^j/, [\'craig\',\'john\',\'jake\']); //[\'john\',\'jake\']\n\t\t</script>\n\t</head>\n\t<body>\n\t</body>\n</html>\n```\n\n## API\n\n### .sift(filter[, array][, selectorFn])\n\n- `filter` - the filter to use against the target array\n- `array` - sifts against target array. Without this, a function is returned\n- `selectorFn` - selector for the values within the array. \n\nWith an array:\n\n```javascript\nsift({$exists:true}, [\'craig\',null]); //[\'craig\']\n```\n\nWithout an array, a sifter is returned:\n\n```javascript\nvar siftExists = sift({$exists:true});\n\nsiftExists([\'craig\',null]); //[\'craig\']\n```\n\nWith a selector:\n\n```javascript\nvar sifter = sift({$exists:true}, function(user) {\n\treturn !!user.name;\n});\n\n\nsifter([\n\t{\n\t\tname: "Craig"\n\t},\n\t{\n\t\tname: null\n\t}\n])\n```\n\nWith your sifter, you can also **test** values:\n\n```javascript\nsiftExists.test(null); //false\nsiftExists.test(\'craig\'); //true\n```\n\n\n## Supported Operators:\n\nSee MongoDB\'s [advanced queries](http://www.mongodb.org/display/DOCS/Advanced+Queries) for more info.\n\n### $in\n\narray value must be *$in* the given query:\n\nIntersecting two arrays:\n \n```javascript\n//filtered: [\'Brazil\']\nsift({ $in: [\'Costa Rica\',\'Brazil\'] }, [\'Brazil\',\'Haiti\',\'Peru\',\'Chile\']); \n``` \n\nHere\'s another example. This acts more like the $or operator:\n\n```javascript\nsift({ location: { $in: [\'Costa Rica\',\'Brazil\'] } }, { name: \'Craig\', location: \'Brazil\' });\n```\n\n### $nin\n\nOpposite of $in:\n\n```javascript\n//filtered: [\'Haiti\',\'Peru\',\'Chile\']\nsift({ $nin: [\'Costa Rica\',\'Brazil\'] }, [\'Brazil\',\'Haiti\',\'Peru\',\'Chile\']); \n``` \n\n### $exists\n\nChecks if whether a value exists:\n\n```javascript\n//filtered: [\'Craig\',\'Tim\']\nsift({ $exists: true }, [\'Craig\',null,\'Tim\']); \n``` \n\nYou can also filter out values that don\'t exist\n\n```javascript\n//filtered: [{ name: \'Craig\', city: \'Minneapolis\' }]\nsift({ city: { $exists: false } }, [ { name: \'Craig\', city: \'Minneapolis\' }, { name: \'Tim\' }]); \n```\n\n### $gte\n\nChecks if a number is >= value:\n\n```javascript\n//filtered: [2, 3]\nsift({ $gte: 2 }, [0, 1, 2, 3]); \n```\n\n### $gt\n\nChecks if a number is > value:\n\n```javascript\n//filtered: [3]\nsift({ $gt: 2 }, [0, 1, 2, 3]); \n```\n\n### $lte\n\nChecks if a number is <= value.\n\n```javascript\n//filtered: [0, 1, 2]\nsift({ $lte: 2 }, [0, 1, 2, 3]); \n```\n\n### $lt\n\nChecks if number is < value.\n\n```javascript\n//filtered: [0, 1]\nsift({ $lt: 2 }, [0, 1, 2, 3]); \n```\n\n### $eq\n\nChecks if query == value. Note that **$eq can be omitted**. For **$eq**, and **$ne**\n\n```javascript\n//filtered: [{ state: \'MN\' }]\nsift({ state: {$eq: \'MN\' }}, [{ state: \'MN\' }, { state: \'CA\' }, { state: \'WI\' }); \n```\n\nOr:\n\n```javascript\n//filtered: [{ state: \'MN\' }]\nsift({ state: \'MN\' }, [{ state: \'MN\' }, { state: \'CA\' }, { state: \'WI\' }); \n```\n\n### $ne\n\nChecks if query != value.\n\n```javascript\n//filtered: [{ state: \'CA\' }, { state: \'WI\'}] \nsift({ state: {$ne: \'MN\' }}, [{ state: \'MN\' }, { state: \'CA\' }, { state: \'WI\' }); \n```\n\n### $mod\n\nModulus:\n\n```javascript\n//filtered: [300, 600]\nsift({ $mod: [3, 0] }, [100, 200, 300, 400, 500, 600]); \n```\n\n### $all\n\nvalues must match **everything** in array:\n\n```javascript\n//filtered: [ { tags: [\'books\',\'programming\',\'travel\' ]} ]\nsift({ tags: {$all: [\'books\',\'programming\'] }}, [\n{ tags: [\'books\',\'programming\',\'travel\' ] }, \n{ tags: [\'travel\',\'cooking\'] } ]); \n```\n\n### $and\n\nability to use an array of expressions. All expressions must test true.\n\n```javascript\n//filtered: [ { name: \'Craig\', state: \'MN\' }]\n\nsift({ $and: [ { name: \'Craig\' }, { state: \'MN\' } ] }, [ \n{ name: \'Craig\', state: \'MN\' }, \n{ name: \'Tim\', state: \'MN\' }, \n{ name: \'Joe\', state: \'CA\' } ]); \n```\n\n### $or\n\nOR array of expressions.\n\n```javascript\n//filtered: [ { name: \'Craig\', state: \'MN\' }, { name: \'Tim\', state: \'MN\' }]\nsift({ $or: [ { name: \'Craig\' }, { state: \'MN\' } ] }, [ \n{ name: \'Craig\', state: \'MN\' }, \n{ name: \'Tim\', state: \'MN\' }, \n{ name: \'Joe\', state: \'CA\' } ]); \n```\n\n### $nor\n\nopposite of or:\n\n```javascript\n//filtered: [ { name: \'Tim\', state: \'MN\' }, { name: \'Joe\', state: \'CA\' }]\nsift({ $nor: [ { name: \'Craig\' }, { state: \'MN\' } ] }, [ \n{ name: \'Craig\', state: \'MN\' }, \n{ name: \'Tim\', state: \'MN\' }, \n{ name: \'Joe\', state: \'CA\' } ]); \n```\n\n\n### $size\n\nMatches an array - must match given size:\n\n```javascript\n//filtered: [\'food\',\'cooking\']\nsift({ tags: { $size: 2 } }, [ { tags: [\'food\',\'cooking\'] }, { tags: [\'traveling\'] }]); \n```\n\n### $type\n\nMatches a values based on the type\n\n```javascript\nsift({ $type: Date }, [new Date(), 4342, \'hello world\']); //returns single date\nsift({ $type: String }, [new Date(), 4342, \'hello world\']); //returns [\'hello world\']\n```\n\n### $regex\n\nMatches values based on the given regular expression\n\n```javascript\nsift({ $regex: /^f/i, $nin: ["frank"] }, ["frank", "fred", "sam", "frost"]); // ["fred", "frost"]\n```\n\n### $where\n\nMatches based on some javascript comparison\n\n```javascript\nsift({ $where: "this.name === \'frank\'" }, [{name:\'frank\'},{name:\'joe\'}]); // ["frank"]\nsift({ \n\t$where: function() { \n\t\treturn this.name === "frank"\n\t}\n}, [{name:\'frank\'},{name:\'joe\'}]); // ["frank"]\n```\n\n### $not\n\nNot expression:\n\n```javascript\nsift({$not:{$in:[\'craig\',\'tim\']}}, [\'craig\',\'tim\',\'jake\']); //[\'jake\']\nsift({$not:{$size:5}}, [\'craig\',\'tim\',\'jake\']); //[\'tim\',\'jake\']\n```\n\n## sub object Searching\n\n\n```javascript\nvar people = [{\n\tname: \'craig\',\n\taddress: {\n\t\tcity: \'Minneapolis\'\n\t}\n},\n{\n\tname: \'tim\',\n\taddress: {\n\t\tcity: \'St. Paul\'\n\t}\n}];\n\nvar sifted = sift({ address: { city: \'Minneapolis\' }}, people); // count = 1\n\n//or\nvar sifted = sift({\'address.city\': \'minneapolis\'}, people);//count = 1\n```\n\n\n## Custom Expressions\n\nYou can add your own expressions. For instance - say you want to do some bitmask filtering, you could add this example:\n\n```javascript\n\nsift.use({\n\toperators: {\n\t\tband: function(a, b) {\n\t\t\treturn (a & b) ? 0 : -1; // 0 = exists, -1 = doesn\'t exist\n\t\t}\n\t}\n})\n\n// ops\nvar IS_ANIMAL = 2,\nIS_PERSON     = IS_ANIMAL   << 1,\nIS_DOG        = IS_PERSON   << 1,\nEATS_CEREAL   = IS_DOG      << 1,\nEATS_BONES    = EATS_CEREAL << 1;\n\nsift({ $band: IS_PERSON }, [ S_PERSON|EATS_CEREAL, IS_DOG|EATS_BONES, IS_PERSON ]);\n```\n',
17 silly publish   readmeFilename: 'README.md',
17 silly publish   gitHead: 'ce50f12201b66736bb543cd69719cb58e7c1aaf7',
17 silly publish   _id: 'sift@1.1.0',
17 silly publish   _shasum: 'ed26fc262c5e5c3c30987946d431b3e79594c431',
17 silly publish   _from: '.' }
18 silly mapToRegistry name sift
19 silly mapToRegistry using default registry
20 silly mapToRegistry registry http://registry.npmjs.org/
21 silly mapToRegistry uri http://registry.npmjs.org/sift
22 verbose publish registryBase http://registry.npmjs.org/
23 silly publish uploading /Users/craig/.npm/sift/1.1.0/package.tgz
24 verbose request uri http://registry.npmjs.org/sift
25 verbose request sending authorization for write operation
26 info attempt registry request try #1 at 12:00:50
27 verbose request id c6c969e1f06a8760
28 http request PUT http://registry.npmjs.org/sift
29 http 403 http://registry.npmjs.org/sift
30 verbose headers { server: 'CouchDB/1.5.0 (Erlang OTP/R16B03)',
30 verbose headers   'content-type': 'application/json',
30 verbose headers   'cache-control': 'max-age=60',
30 verbose headers   'content-length': '12690',
30 verbose headers   'accept-ranges': 'bytes',
30 verbose headers   date: 'Mon, 23 Feb 2015 20:00:49 GMT',
30 verbose headers   via: '1.1 varnish',
30 verbose headers   connection: 'keep-alive',
30 verbose headers   'x-served-by': 'cache-lax1434-LAX',
30 verbose headers   'x-cache': 'MISS',
30 verbose headers   'x-cache-hits': '0',
30 verbose headers   'x-timer': 'S1424721649.431336,VS0,VE163' }
31 verbose request invalidating /Users/craig/.npm/registry.npmjs.org/sift on PUT
32 error publish Failed PUT 403
33 verbose stack Error: forbidden cannot modify pre-existing version: 1.1.0
33 verbose stack old={"name":"sift","description":"mongodb query style array filtering","version":"1.1.0","repository":{},"engines":{},"dependencies":{},"devDependencies":{"bson":"^0.2.18","coveralls":"^2.11.2","istanbul":"^0.3.5","jscs":"^1.11.0","jshint":"^2.6.0","mocha":"^2.1.0","uglify-js":"^2.4.16"},"main":"./sift.js","scripts":{"test":"make lint test-coveralls"},"gitHead":"cbe94088f61dfa928cf2e2853d8bf9219f593be5","_id":"sift@1.1.0","_shasum":"d0645d1daad83ecd5fd46c3305a2c54cad82244e","_from":".","_npmVersion":"2.5.0","_nodeVersion":"0.10.36","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"d0645d1daad83ecd5fd46c3305a2c54cad82244e","tarball":"http://registry.npmjs.org/sift/-/sift-1.1.0.tgz"}}
33 verbose stack new={"name":"sift","description":"mongodb query style array filtering","version":"1.1.0","repository":{},"engines":{},"dependencies":{},"devDependencies":{"bson":"^0.2.18","coveralls":"^2.11.2","istanbul":"^0.3.5","jscs":"^1.11.0","jshint":"^2.6.0","mocha":"^2.1.0","uglify-js":"^2.4.16"},"main":"./sift.js","scripts":{"test":"make lint test-coveralls"},"readme":"## MongoDB inspired array filtering \u000a[![Build Status](https://secure.travis-ci.org/crcn/sift.js.png)](https://secure.travis-ci.org/crcn/sift.js) [![Coverage Status](https://coveralls.io/repos/crcn/sift.js/badge.svg)](https://coveralls.io/r/crcn/sift.js) [![Join the chat at https://gitter.im/crcn/sift.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/crcn/sift.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\u000a\u000a**For extended documentation, checkout http://docs.mongodb.org/manual/reference/operator/query/**\u000a\u000a## Features:\u000a\u000a- Supported operators: [$in](#in), [$nin](#nin), [$exists](#exists), [$gte](#gte), [$gt](#gt), [$lte](#lte), [$lt](#lt), [$eq](#eq), [$ne](#ne), [$mod](#mod), [$all](#all), [$and](#and), [$or](#or), [$nor](#nor), [$not](#not), [$size](#size), [$type](#type), [$regex](#regex), [$where](#where)\u000a- Regexp searches\u000a- Function filtering\u000a- sub object searching\u000a- dot notation searching\u000a- Supports node.js, and web\u000a- Small (2 kb minified) library\u000a- Custom Expressions \u000a\u000a\u000a\u000a## Node.js Examples\u000a\u000a```javascript\u000a\u000avar sift = require('sift');\u000a\u000a//intersecting arrays\u000avar sifted = sift({ $in: ['hello','world'] }, ['hello','sifted','array!']); //['hello']\u000a\u000a//regexp filter\u000avar sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\u000a\u000a\u000a//A *sifter* is returned if the second parameter is omitted\u000avar siftPeople = sift({\u000a\u000a\u0009//you can also filter against functions\u000a\u0009name: function(value) {\u000a\u0009\u0009return value.length == 5;\u000a\u0009}\u000a});\u000a\u000a//filtered: [{ name: 'craig' }]\u000asiftPeople([{\u000a\u0009name: 'craig',\u000a},\u000a{\u000a\u0009name: 'john'\u000a},\u000a{\u000a\u0009name: 'jake'\u000a}]);\u000a\u000a\u000a//you can test *single values* against your custom sifter\u000asiftPeople.test({ name: 'sarah' }); //true\u000asiftPeople.test({ name: 'tim' }); //false\\\u000a```\u000a\u000a## Browser Examples\u000a```html\u000a<html>\u000a\u0009<head>\u000a\u0009\u0009<script src=\"https://raw.github.com/crcn/sift.js/master/sift.min.js\" type=\"text/javascript\"></script>\u000a\u0009\u0009<script type=\"text/javascript\">\u000a\u0009\u0009\u0009//regexp filter\u000a\u0009\u0009\u0009var sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\u000a\u0009\u0009</script>\u000a\u0009</head>\u000a\u0009<body>\u000a\u0009</body>\u000a</html>\u000a```\u000a\u000a## API\u000a\u000a### .sift(filter[, array][, selectorFn])\u000a\u000a- `filter` - the filter to use against the target array\u000a- `array` - sifts against target array. Without this, a function is returned\u000a- `selectorFn` - selector for the values within the array. \u000a\u000aWith an array:\u000a\u000a```javascript\u000asift({$exists:true}, ['craig',null]); //['craig']\u000a```\u000a\u000aWithout an array, a sifter is returned:\u000a\u000a```javascript\u000avar siftExists = sift({$exists:true});\u000a\u000asiftExists(['craig',null]); //['craig']\u000a```\u000a\u000aWith a selector:\u000a\u000a```javascript\u000avar sifter = sift({$exists:true}, function(user) {\u000a\u0009return !!user.name;\u000a});\u000a\u000a\u000asifter([\u000a\u0009{\u000a\u0009\u0009name: \"Craig\"\u000a\u0009},\u000a\u0009{\u000a\u0009\u0009name: null\u000a\u0009}\u000a])\u000a```\u000a\u000aWith your sifter, you can also **test** values:\u000a\u000a```javascript\u000asiftExists.test(null); //false\u000asiftExists.test('craig'); //true\u000a```\u000a\u000a\u000a## Supported Operators:\u000a\u000aSee MongoDB's [advanced queries](http://www.mongodb.org/display/DOCS/Advanced+Queries) for more info.\u000a\u000a### $in\u000a\u000aarray value must be *$in* the given query:\u000a\u000aIntersecting two arrays:\u000a \u000a```javascript\u000a//filtered: ['Brazil']\u000asift({ $in: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']); \u000a``` \u000a\u000aHere's another example. This acts more like the $or operator:\u000a\u000a```javascript\u000asift({ location: { $in: ['Costa Rica','Brazil'] } }, { name: 'Craig', location: 'Brazil' });\u000a```\u000a\u000a### $nin\u000a\u000aOpposite of $in:\u000a\u000a```javascript\u000a//filtered: ['Haiti','Peru','Chile']\u000asift({ $nin: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']); \u000a``` \u000a\u000a### $exists\u000a\u000aChecks if whether a value exists:\u000a\u000a```javascript\u000a//filtered: ['Craig','Tim']\u000asift({ $exists: true }, ['Craig',null,'Tim']); \u000a``` \u000a\u000aYou can also filter out values that don't exist\u000a\u000a```javascript\u000a//filtered: [{ name: 'Craig', city: 'Minneapolis' }]\u000asift({ city: { $exists: false } }, [ { name: 'Craig', city: 'Minneapolis' }, { name: 'Tim' }]); \u000a```\u000a\u000a### $gte\u000a\u000aChecks if a number is >= value:\u000a\u000a```javascript\u000a//filtered: [2, 3]\u000asift({ $gte: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $gt\u000a\u000aChecks if a number is > value:\u000a\u000a```javascript\u000a//filtered: [3]\u000asift({ $gt: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $lte\u000a\u000aChecks if a number is <= value.\u000a\u000a```javascript\u000a//filtered: [0, 1, 2]\u000asift({ $lte: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $lt\u000a\u000aChecks if number is < value.\u000a\u000a```javascript\u000a//filtered: [0, 1]\u000asift({ $lt: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $eq\u000a\u000aChecks if query == value. Note that **$eq can be omitted**. For **$eq**, and **$ne**\u000a\u000a```javascript\u000a//filtered: [{ state: 'MN' }]\u000asift({ state: {$eq: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \u000a```\u000a\u000aOr:\u000a\u000a```javascript\u000a//filtered: [{ state: 'MN' }]\u000asift({ state: 'MN' }, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \u000a```\u000a\u000a### $ne\u000a\u000aChecks if query != value.\u000a\u000a```javascript\u000a//filtered: [{ state: 'CA' }, { state: 'WI'}] \u000asift({ state: {$ne: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \u000a```\u000a\u000a### $mod\u000a\u000aModulus:\u000a\u000a```javascript\u000a//filtered: [300, 600]\u000asift({ $mod: [3, 0] }, [100, 200, 300, 400, 500, 600]); \u000a```\u000a\u000a### $all\u000a\u000avalues must match **everything** in array:\u000a\u000a```javascript\u000a//filtered: [ { tags: ['books','programming','travel' ]} ]\u000asift({ tags: {$all: ['books','programming'] }}, [\u000a{ tags: ['books','programming','travel' ] }, \u000a{ tags: ['travel','cooking'] } ]); \u000a```\u000a\u000a### $and\u000a\u000aability to use an array of expressions. All expressions must test true.\u000a\u000a```javascript\u000a//filtered: [ { name: 'Craig', state: 'MN' }]\u000a\u000asift({ $and: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \u000a{ name: 'Craig', state: 'MN' }, \u000a{ name: 'Tim', state: 'MN' }, \u000a{ name: 'Joe', state: 'CA' } ]); \u000a```\u000a\u000a### $or\u000a\u000aOR array of expressions.\u000a\u000a```javascript\u000a//filtered: [ { name: 'Craig', state: 'MN' }, { name: 'Tim', state: 'MN' }]\u000asift({ $or: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \u000a{ name: 'Craig', state: 'MN' }, \u000a{ name: 'Tim', state: 'MN' }, \u000a{ name: 'Joe', state: 'CA' } ]); \u000a```\u000a\u000a### $nor\u000a\u000aopposite of or:\u000a\u000a```javascript\u000a//filtered: [ { name: 'Tim', state: 'MN' }, { name: 'Joe', state: 'CA' }]\u000asift({ $nor: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \u000a{ name: 'Craig', state: 'MN' }, \u000a{ name: 'Tim', state: 'MN' }, \u000a{ name: 'Joe', state: 'CA' } ]); \u000a```\u000a\u000a\u000a### $size\u000a\u000aMatches an array - must match given size:\u000a\u000a```javascript\u000a//filtered: ['food','cooking']\u000asift({ tags: { $size: 2 } }, [ { tags: ['food','cooking'] }, { tags: ['traveling'] }]); \u000a```\u000a\u000a### $type\u000a\u000aMatches a values based on the type\u000a\u000a```javascript\u000asift({ $type: Date }, [new Date(), 4342, 'hello world']); //returns single date\u000asift({ $type: String }, [new Date(), 4342, 'hello world']); //returns ['hello world']\u000a```\u000a\u000a### $regex\u000a\u000aMatches values based on the given regular expression\u000a\u000a```javascript\u000asift({ $regex: /^f/i, $nin: [\"frank\"] }, [\"frank\", \"fred\", \"sam\", \"frost\"]); // [\"fred\", \"frost\"]\u000a```\u000a\u000a### $where\u000a\u000aMatches based on some javascript comparison\u000a\u000a```javascript\u000asift({ $where: \"this.name === 'frank'\" }, [{name:'frank'},{name:'joe'}]); // [\"frank\"]\u000asift({ \u000a\u0009$where: function() { \u000a\u0009\u0009return this.name === \"frank\"\u000a\u0009}\u000a}, [{name:'frank'},{name:'joe'}]); // [\"frank\"]\u000a```\u000a\u000a### $not\u000a\u000aNot expression:\u000a\u000a```javascript\u000asift({$not:{$in:['craig','tim']}}, ['craig','tim','jake']); //['jake']\u000asift({$not:{$size:5}}, ['craig','tim','jake']); //['tim','jake']\u000a```\u000a\u000a## sub object Searching\u000a\u000a\u000a```javascript\u000avar people = [{\u000a\u0009name: 'craig',\u000a\u0009address: {\u000a\u0009\u0009city: 'Minneapolis'\u000a\u0009}\u000a},\u000a{\u000a\u0009name: 'tim',\u000a\u0009address: {\u000a\u0009\u0009city: 'St. Paul'\u000a\u0009}\u000a}];\u000a\u000avar sifted = sift({ address: { city: 'Minneapolis' }}, people); // count = 1\u000a\u000a//or\u000avar sifted = sift({'address.city': 'minneapolis'}, people);//count = 1\u000a```\u000a\u000a\u000a## Custom Expressions\u000a\u000aYou can add your own expressions. For instance - say you want to do some bitmask filtering, you could add this example:\u000a\u000a```javascript\u000a\u000asift.use({\u000a\u0009operators: {\u000a\u0009\u0009band: function(a, b) {\u000a\u0009\u0009\u0009return (a & b) ? 0 : -1; // 0 = exists, -1 = doesn't exist\u000a\u0009\u0009}\u000a\u0009}\u000a})\u000a\u000a// ops\u000avar IS_ANIMAL = 2,\u000aIS_PERSON     = IS_ANIMAL   << 1,\u000aIS_DOG        = IS_PERSON   << 1,\u000aEATS_CEREAL   = IS_DOG      << 1,\u000aEATS_BONES    = EATS_CEREAL << 1;\u000a\u000asift({ $band: IS_PERSON }, [ S_PERSON|EATS_CEREAL, IS_DOG|EATS_BONES, IS_PERSON ]);\u000a```\u000a","readmeFilename":"README.md","gitHead":"ce50f12201b66736bb543cd69719cb58e7c1aaf7","_id":"sift@1.1.0","_shasum":"ed26fc262c5e5c3c30987946d431b3e79594c431","_from":".","_npmVersion":"2.5.0","_nodeVersion":"0.10.36","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"ed26fc262c5e5c3c30987946d431b3e79594c431","tarball":"http://registry.npmjs.org/sift/-/sift-1.1.0.tgz"}}: sift
33 verbose stack     at CachingRegistryClient.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:254:14)
33 verbose stack     at Request._callback (/usr/local/lib/node_modules/npm/node_modules/npm-registry-client/lib/request.js:178:14)
33 verbose stack     at Request.self.callback (/usr/local/lib/node_modules/npm/node_modules/request/request.js:373:22)
33 verbose stack     at Request.emit (events.js:98:17)
33 verbose stack     at Request.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1318:14)
33 verbose stack     at Request.emit (events.js:117:20)
33 verbose stack     at IncomingMessage.<anonymous> (/usr/local/lib/node_modules/npm/node_modules/request/request.js:1266:12)
33 verbose stack     at IncomingMessage.emit (events.js:117:20)
33 verbose stack     at _stream_readable.js:944:16
33 verbose stack     at process._tickCallback (node.js:442:13)
34 verbose statusCode 403
35 verbose pkgid sift
36 verbose cwd /Users/craig/Developer/Public/sift.js
37 error Darwin 14.1.0
38 error argv "node" "/usr/local/bin/npm" "publish"
39 error node v0.10.36
40 error npm  v2.5.0
41 error code E403
42 error forbidden cannot modify pre-existing version: 1.1.0
42 error old={"name":"sift","description":"mongodb query style array filtering","version":"1.1.0","repository":{},"engines":{},"dependencies":{},"devDependencies":{"bson":"^0.2.18","coveralls":"^2.11.2","istanbul":"^0.3.5","jscs":"^1.11.0","jshint":"^2.6.0","mocha":"^2.1.0","uglify-js":"^2.4.16"},"main":"./sift.js","scripts":{"test":"make lint test-coveralls"},"gitHead":"cbe94088f61dfa928cf2e2853d8bf9219f593be5","_id":"sift@1.1.0","_shasum":"d0645d1daad83ecd5fd46c3305a2c54cad82244e","_from":".","_npmVersion":"2.5.0","_nodeVersion":"0.10.36","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"d0645d1daad83ecd5fd46c3305a2c54cad82244e","tarball":"http://registry.npmjs.org/sift/-/sift-1.1.0.tgz"}}
42 error new={"name":"sift","description":"mongodb query style array filtering","version":"1.1.0","repository":{},"engines":{},"dependencies":{},"devDependencies":{"bson":"^0.2.18","coveralls":"^2.11.2","istanbul":"^0.3.5","jscs":"^1.11.0","jshint":"^2.6.0","mocha":"^2.1.0","uglify-js":"^2.4.16"},"main":"./sift.js","scripts":{"test":"make lint test-coveralls"},"readme":"## MongoDB inspired array filtering \u000a[![Build Status](https://secure.travis-ci.org/crcn/sift.js.png)](https://secure.travis-ci.org/crcn/sift.js) [![Coverage Status](https://coveralls.io/repos/crcn/sift.js/badge.svg)](https://coveralls.io/r/crcn/sift.js) [![Join the chat at https://gitter.im/crcn/sift.js](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/crcn/sift.js?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\u000a\u000a**For extended documentation, checkout http://docs.mongodb.org/manual/reference/operator/query/**\u000a\u000a## Features:\u000a\u000a- Supported operators: [$in](#in), [$nin](#nin), [$exists](#exists), [$gte](#gte), [$gt](#gt), [$lte](#lte), [$lt](#lt), [$eq](#eq), [$ne](#ne), [$mod](#mod), [$all](#all), [$and](#and), [$or](#or), [$nor](#nor), [$not](#not), [$size](#size), [$type](#type), [$regex](#regex), [$where](#where)\u000a- Regexp searches\u000a- Function filtering\u000a- sub object searching\u000a- dot notation searching\u000a- Supports node.js, and web\u000a- Small (2 kb minified) library\u000a- Custom Expressions \u000a\u000a\u000a\u000a## Node.js Examples\u000a\u000a```javascript\u000a\u000avar sift = require('sift');\u000a\u000a//intersecting arrays\u000avar sifted = sift({ $in: ['hello','world'] }, ['hello','sifted','array!']); //['hello']\u000a\u000a//regexp filter\u000avar sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\u000a\u000a\u000a//A *sifter* is returned if the second parameter is omitted\u000avar siftPeople = sift({\u000a\u000a\u0009//you can also filter against functions\u000a\u0009name: function(value) {\u000a\u0009\u0009return value.length == 5;\u000a\u0009}\u000a});\u000a\u000a//filtered: [{ name: 'craig' }]\u000asiftPeople([{\u000a\u0009name: 'craig',\u000a},\u000a{\u000a\u0009name: 'john'\u000a},\u000a{\u000a\u0009name: 'jake'\u000a}]);\u000a\u000a\u000a//you can test *single values* against your custom sifter\u000asiftPeople.test({ name: 'sarah' }); //true\u000asiftPeople.test({ name: 'tim' }); //false\\\u000a```\u000a\u000a## Browser Examples\u000a```html\u000a<html>\u000a\u0009<head>\u000a\u0009\u0009<script src=\"https://raw.github.com/crcn/sift.js/master/sift.min.js\" type=\"text/javascript\"></script>\u000a\u0009\u0009<script type=\"text/javascript\">\u000a\u0009\u0009\u0009//regexp filter\u000a\u0009\u0009\u0009var sifted = sift(/^j/, ['craig','john','jake']); //['john','jake']\u000a\u0009\u0009</script>\u000a\u0009</head>\u000a\u0009<body>\u000a\u0009</body>\u000a</html>\u000a```\u000a\u000a## API\u000a\u000a### .sift(filter[, array][, selectorFn])\u000a\u000a- `filter` - the filter to use against the target array\u000a- `array` - sifts against target array. Without this, a function is returned\u000a- `selectorFn` - selector for the values within the array. \u000a\u000aWith an array:\u000a\u000a```javascript\u000asift({$exists:true}, ['craig',null]); //['craig']\u000a```\u000a\u000aWithout an array, a sifter is returned:\u000a\u000a```javascript\u000avar siftExists = sift({$exists:true});\u000a\u000asiftExists(['craig',null]); //['craig']\u000a```\u000a\u000aWith a selector:\u000a\u000a```javascript\u000avar sifter = sift({$exists:true}, function(user) {\u000a\u0009return !!user.name;\u000a});\u000a\u000a\u000asifter([\u000a\u0009{\u000a\u0009\u0009name: \"Craig\"\u000a\u0009},\u000a\u0009{\u000a\u0009\u0009name: null\u000a\u0009}\u000a])\u000a```\u000a\u000aWith your sifter, you can also **test** values:\u000a\u000a```javascript\u000asiftExists.test(null); //false\u000asiftExists.test('craig'); //true\u000a```\u000a\u000a\u000a## Supported Operators:\u000a\u000aSee MongoDB's [advanced queries](http://www.mongodb.org/display/DOCS/Advanced+Queries) for more info.\u000a\u000a### $in\u000a\u000aarray value must be *$in* the given query:\u000a\u000aIntersecting two arrays:\u000a \u000a```javascript\u000a//filtered: ['Brazil']\u000asift({ $in: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']); \u000a``` \u000a\u000aHere's another example. This acts more like the $or operator:\u000a\u000a```javascript\u000asift({ location: { $in: ['Costa Rica','Brazil'] } }, { name: 'Craig', location: 'Brazil' });\u000a```\u000a\u000a### $nin\u000a\u000aOpposite of $in:\u000a\u000a```javascript\u000a//filtered: ['Haiti','Peru','Chile']\u000asift({ $nin: ['Costa Rica','Brazil'] }, ['Brazil','Haiti','Peru','Chile']); \u000a``` \u000a\u000a### $exists\u000a\u000aChecks if whether a value exists:\u000a\u000a```javascript\u000a//filtered: ['Craig','Tim']\u000asift({ $exists: true }, ['Craig',null,'Tim']); \u000a``` \u000a\u000aYou can also filter out values that don't exist\u000a\u000a```javascript\u000a//filtered: [{ name: 'Craig', city: 'Minneapolis' }]\u000asift({ city: { $exists: false } }, [ { name: 'Craig', city: 'Minneapolis' }, { name: 'Tim' }]); \u000a```\u000a\u000a### $gte\u000a\u000aChecks if a number is >= value:\u000a\u000a```javascript\u000a//filtered: [2, 3]\u000asift({ $gte: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $gt\u000a\u000aChecks if a number is > value:\u000a\u000a```javascript\u000a//filtered: [3]\u000asift({ $gt: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $lte\u000a\u000aChecks if a number is <= value.\u000a\u000a```javascript\u000a//filtered: [0, 1, 2]\u000asift({ $lte: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $lt\u000a\u000aChecks if number is < value.\u000a\u000a```javascript\u000a//filtered: [0, 1]\u000asift({ $lt: 2 }, [0, 1, 2, 3]); \u000a```\u000a\u000a### $eq\u000a\u000aChecks if query == value. Note that **$eq can be omitted**. For **$eq**, and **$ne**\u000a\u000a```javascript\u000a//filtered: [{ state: 'MN' }]\u000asift({ state: {$eq: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \u000a```\u000a\u000aOr:\u000a\u000a```javascript\u000a//filtered: [{ state: 'MN' }]\u000asift({ state: 'MN' }, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \u000a```\u000a\u000a### $ne\u000a\u000aChecks if query != value.\u000a\u000a```javascript\u000a//filtered: [{ state: 'CA' }, { state: 'WI'}] \u000asift({ state: {$ne: 'MN' }}, [{ state: 'MN' }, { state: 'CA' }, { state: 'WI' }); \u000a```\u000a\u000a### $mod\u000a\u000aModulus:\u000a\u000a```javascript\u000a//filtered: [300, 600]\u000asift({ $mod: [3, 0] }, [100, 200, 300, 400, 500, 600]); \u000a```\u000a\u000a### $all\u000a\u000avalues must match **everything** in array:\u000a\u000a```javascript\u000a//filtered: [ { tags: ['books','programming','travel' ]} ]\u000asift({ tags: {$all: ['books','programming'] }}, [\u000a{ tags: ['books','programming','travel' ] }, \u000a{ tags: ['travel','cooking'] } ]); \u000a```\u000a\u000a### $and\u000a\u000aability to use an array of expressions. All expressions must test true.\u000a\u000a```javascript\u000a//filtered: [ { name: 'Craig', state: 'MN' }]\u000a\u000asift({ $and: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \u000a{ name: 'Craig', state: 'MN' }, \u000a{ name: 'Tim', state: 'MN' }, \u000a{ name: 'Joe', state: 'CA' } ]); \u000a```\u000a\u000a### $or\u000a\u000aOR array of expressions.\u000a\u000a```javascript\u000a//filtered: [ { name: 'Craig', state: 'MN' }, { name: 'Tim', state: 'MN' }]\u000asift({ $or: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \u000a{ name: 'Craig', state: 'MN' }, \u000a{ name: 'Tim', state: 'MN' }, \u000a{ name: 'Joe', state: 'CA' } ]); \u000a```\u000a\u000a### $nor\u000a\u000aopposite of or:\u000a\u000a```javascript\u000a//filtered: [ { name: 'Tim', state: 'MN' }, { name: 'Joe', state: 'CA' }]\u000asift({ $nor: [ { name: 'Craig' }, { state: 'MN' } ] }, [ \u000a{ name: 'Craig', state: 'MN' }, \u000a{ name: 'Tim', state: 'MN' }, \u000a{ name: 'Joe', state: 'CA' } ]); \u000a```\u000a\u000a\u000a### $size\u000a\u000aMatches an array - must match given size:\u000a\u000a```javascript\u000a//filtered: ['food','cooking']\u000asift({ tags: { $size: 2 } }, [ { tags: ['food','cooking'] }, { tags: ['traveling'] }]); \u000a```\u000a\u000a### $type\u000a\u000aMatches a values based on the type\u000a\u000a```javascript\u000asift({ $type: Date }, [new Date(), 4342, 'hello world']); //returns single date\u000asift({ $type: String }, [new Date(), 4342, 'hello world']); //returns ['hello world']\u000a```\u000a\u000a### $regex\u000a\u000aMatches values based on the given regular expression\u000a\u000a```javascript\u000asift({ $regex: /^f/i, $nin: [\"frank\"] }, [\"frank\", \"fred\", \"sam\", \"frost\"]); // [\"fred\", \"frost\"]\u000a```\u000a\u000a### $where\u000a\u000aMatches based on some javascript comparison\u000a\u000a```javascript\u000asift({ $where: \"this.name === 'frank'\" }, [{name:'frank'},{name:'joe'}]); // [\"frank\"]\u000asift({ \u000a\u0009$where: function() { \u000a\u0009\u0009return this.name === \"frank\"\u000a\u0009}\u000a}, [{name:'frank'},{name:'joe'}]); // [\"frank\"]\u000a```\u000a\u000a### $not\u000a\u000aNot expression:\u000a\u000a```javascript\u000asift({$not:{$in:['craig','tim']}}, ['craig','tim','jake']); //['jake']\u000asift({$not:{$size:5}}, ['craig','tim','jake']); //['tim','jake']\u000a```\u000a\u000a## sub object Searching\u000a\u000a\u000a```javascript\u000avar people = [{\u000a\u0009name: 'craig',\u000a\u0009address: {\u000a\u0009\u0009city: 'Minneapolis'\u000a\u0009}\u000a},\u000a{\u000a\u0009name: 'tim',\u000a\u0009address: {\u000a\u0009\u0009city: 'St. Paul'\u000a\u0009}\u000a}];\u000a\u000avar sifted = sift({ address: { city: 'Minneapolis' }}, people); // count = 1\u000a\u000a//or\u000avar sifted = sift({'address.city': 'minneapolis'}, people);//count = 1\u000a```\u000a\u000a\u000a## Custom Expressions\u000a\u000aYou can add your own expressions. For instance - say you want to do some bitmask filtering, you could add this example:\u000a\u000a```javascript\u000a\u000asift.use({\u000a\u0009operators: {\u000a\u0009\u0009band: function(a, b) {\u000a\u0009\u0009\u0009return (a & b) ? 0 : -1; // 0 = exists, -1 = doesn't exist\u000a\u0009\u0009}\u000a\u0009}\u000a})\u000a\u000a// ops\u000avar IS_ANIMAL = 2,\u000aIS_PERSON     = IS_ANIMAL   << 1,\u000aIS_DOG        = IS_PERSON   << 1,\u000aEATS_CEREAL   = IS_DOG      << 1,\u000aEATS_BONES    = EATS_CEREAL << 1;\u000a\u000asift({ $band: IS_PERSON }, [ S_PERSON|EATS_CEREAL, IS_DOG|EATS_BONES, IS_PERSON ]);\u000a```\u000a","readmeFilename":"README.md","gitHead":"ce50f12201b66736bb543cd69719cb58e7c1aaf7","_id":"sift@1.1.0","_shasum":"ed26fc262c5e5c3c30987946d431b3e79594c431","_from":".","_npmVersion":"2.5.0","_nodeVersion":"0.10.36","_npmUser":{"name":"architectd","email":"craig.j.condon@gmail.com"},"maintainers":[{"name":"architectd","email":"craig.j.condon@gmail.com"}],"dist":{"shasum":"ed26fc262c5e5c3c30987946d431b3e79594c431","tarball":"http://registry.npmjs.org/sift/-/sift-1.1.0.tgz"}}: sift
43 error If you need help, you may report this error at:
43 error     <http://github.com/npm/npm/issues>
44 verbose exit [ 1, true ]
